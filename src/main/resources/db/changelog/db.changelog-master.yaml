databaseChangeLog:
  - changeSet:
      id: 1
      author: ulxanxv
      changes:
        - createTable:
            tableName: credential
            columns:
              - column:
                  name: id
                  type: bigint
                  autoIncrement: true
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: login
                  type: varchar(32)
                  constraints:
                    unique: true
                    nullable: false
              - column:
                  name: experience
                  type: bigint
                  constraints:
                    unique: false
                    nullable: false
              - column:
                  name: email
                  type: varchar(128)
                  constraints:
                    nullable: false
              - column:
                  name: password
                  type: varchar(255)
                  constraints:
                    nullable: false
              - column:
                  name: role
                  type: varchar(32)
                  constraints:
                    nullable: false
              - column:
                  name: file_name
                  type: varchar(1024)
                  constraints:
                    nullable: true
        - createTable:
            tableName: task
            columns:
              - column:
                  name: id
                  type: bigint
                  autoIncrement: true
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: in_moderation
                  type: boolean
                  constraints:
                    nullable: false
              - column:
                  name: short_description
                  type: varchar(128)
                  constraints:
                    unique: true
                    nullable: false
              - column:
                  name: long_description
                  type: varchar(32768)
                  constraints:
                    nullable: false
              - column:
                  name: class_name
                  type: varchar(256)
              - column:
                  name: test_class_name
                  type: varchar(256)
              - column:
                  name: test_code
                  type: varchar(32768)
                  constraints:
                    nullable: false
              - column:
                  name: start_code
                  type: varchar(32768)
                  constraints:
                    nullable: false
              - column:
                  name: difficult
                  type: int
                  constraints:
                    nullable: false
        - createTable:
            tableName: task_rating
            columns:
              - column:
                  name: id
                  type: bigint
                  autoIncrement: true
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: credential_id
                  type: bigint
                  constraints:
                    foreignKeyName: FK_credential_id
                    references: credential(id)
                    nullable: false
              - column:
                  name: task_id
                  type: bigint
                  constraints:
                    foreignKeyName: FK_task_rating_task
                    references: task(id)
                    nullable: false
              - column:
                  name: solution
                  type: varchar(32768)
                  constraints:
                    nullable: false
              - column:
                  name: brevity
                  type: bigint
                  constraints:
                    nullable: false
              - column:
                  name: rapidity
                  type: double
                  constraints:
                    nullable: false
              - column:
                  name: total_score
                  type: double
                  constraints:
                    nullable: false
        - addUniqueConstraint:
            columnNames: credential_id, task_id
            constraintName: UNIQUE_TASK_RATING_credential_id_task_id
            tableName: task_rating
  - changeSet:
      id: 2
      author: ulxanxv
      changes:
        - insert:
            tableName: credential
            columns:
              - column:
                  name: email
                  value: "marzpg80@gmail.com"
              - column:
                  name: login
                  value: "Ulxanxv"
              - column:
                  name: experience
                  value: 1000
              - column:
                  name: password
                  value: "$2y$12$.EzBlMBHH9jp5lHgZi4Fw.sEaIeaM2E2G3.h5oE7L8IY2YDUhB/la"
              - column:
                  name: role
                  value: "MODER"
        - insert:
            tableName: credential
            columns:
              - column:
                  name: email
                  value: "marzpg800@gmail.com"
              - column:
                  name: login
                  value: "Qwerty"
              - column:
                  name: experience
                  value: 1000
              - column:
                  name: password
                  value: "$2y$12$.EzBlMBHH9jp5lHgZi4Fw.sEaIeaM2E2G3.h5oE7L8IY2YDUhB/la"
              - column:
                  name: role
                  value: "ADMIN"

        - insert:
            tableName: task
            columns:
              - column:
                  name: in_moderation
                  value: false
              - column:
                  name: short_description
                  value: "Перевод в верхний регистр"
              - column:
                  name: long_description
                  value: "Напишите функцию, которая преобразует входную строку в верхний регистр."
              - column:
                  name: class_name
                  value: "Upper"
              - column:
                  name: test_class_name
                  value: "SolutionTest"
              - column:
                  name: test_code
                  value: "import org.junit.Test;
                          import static org.junit.Assert.assertEquals;
                          import org.junit.runners.JUnit4;

                          public class SolutionTest {

                          Upper u = new Upper();

                              @Test
                              public void testSomething() {
                                 assertEquals(\"HELLO\", u.MakeUpperCase(\"hello\"));
                              }
                          }"
              - column:
                  name: start_code
                  value: "class Upper {\n\n\tpublic static String MakeUpperCase(String str) {\n\t\treturn str;\n\t}\n\n}"
              - column:
                  name: difficult
                  value: 1
        - insert:
            tableName: task
            columns:
              - column:
                  name: in_moderation
                  value: false
              - column:
                  name: short_description
                  value: "Разбиение camelCase"
              - column:
                  name: long_description
                  value: "Необходимо написать функцию, которая разбивает camelCase на раздельные слова. Разделитель — пробел.
                  \n\n\nПример:\n\n
                  camelCasing => camel Casing\n
                  identifier  => identifier\n
                  \"\"          => \"\"
                  "
              - column:
                  name: class_name
                  value: "Solution"
              - column:
                  name: test_class_name
                  value: "SolutionTest"
              - column:
                  name: test_code
                  value: "
                  import org.junit.Test;
                  import static org.junit.Assert.assertEquals;
                  import org.junit.runners.JUnit4;

                  public class SolutionTest {
                      @Test
                      public void tests() {
                        assertEquals( \"Incorrect\", \"camel Casing\", Solution.camelCase(\"camelCasing\"));
                        assertEquals( \"Incorrect\", \"camel Casing Test\", Solution.camelCase(\"camelCasingTest\"));
                        assertEquals( \"Incorrect\", \"camelcasingtest\", Solution.camelCase(\"camelcasingtest\"));
                    }
                  }
                  "
              - column:
                  name: start_code
                  value: "class Solution {\n

                    \tpublic static String camelCase(String input) {\n
                      \t\treturn null;\n
                    \t}\n

                  }"
              - column:
                  name: difficult
                  value: 2
        - insert:
            tableName: task
            columns:
              - column:
                  name: in_moderation
                  value: false
              - column:
                  name: short_description
                  value: "Проверка объединенных строк"
              - column:
                  name: long_description
                  value: "На собеседовании вам предлагается написать алгоритм, который проверяет, может ли данная строка, s быть сформирована из двух других строк, part1 и part2.
\n\nОграничение состоит в том, что символы в part1 и part2 должны располагаться в том же порядке, что и в s.
\n\nИнтервьюер дает вам следующий пример и предлагает выяснить остальное из заданных тестовых примеров.
\n\n\nНапример:
\n\n'codewars' это слияние из 'cdw' и 'oears':
\ns:      c o d e w a r s   = codewars\npart1:  c   d   w         = cdw\npart2:    o   e   a r s   = oears
"
              - column:
                  name: class_name
                  value: "StringMerger"
              - column:
                  name: test_class_name
                  value: "StringMergerTest"
              - column:
                  name: test_code
                  value: "
                  import org.junit.Test;
                  import static org.junit.Assert.*;

                  public class StringMergerTest {

                    @Test
                    public void normalHappyFlow() {
                      assertTrue(\"codewars can be created from code and wars\", StringMerger.isMerge(\"codewars\", \"code\", \"wars\"));
                      assertTrue(\"codewars can be created from cdwr and oeas\", StringMerger.isMerge(\"codewars\", \"cdwr\", \"oeas\"));
                      assertFalse(\"Codewars are not codwars\", StringMerger.isMerge(\"codewars\", \"cod\", \"wars\"));
                    }

                  }
                  "
              - column:
                  name: start_code
                  value: "public class StringMerger {\n

                      \tpublic static boolean isMerge(String s, String part1, String part2) {\n
                         \t\treturn false;\n
                      \t}\n

                  }"
              - column:
                  name: difficult
                  value: 3